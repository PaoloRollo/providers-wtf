import type { Block } from '../../types/block.js';
import type { Chain } from '../../types/chain.js';
import type { ExtractFormatterReturnType } from '../../types/formatter.js';
import type { RpcBlock } from '../../types/rpc.js';
export type FormattedBlock<TChain extends Chain | undefined = Chain | undefined> = ExtractFormatterReturnType<TChain, 'block', Block>;
export declare function formatBlock(block: Partial<RpcBlock>): Block;
export declare const defineBlock: <TOverrideParameters, TOverrideReturnType, TExclude extends (keyof RpcBlock)[] = []>({ exclude, format: overrides, }: {
    exclude?: TExclude | undefined;
    format: (_: TOverrideParameters) => TOverrideReturnType;
}) => {
    format: (args: Partial<RpcBlock> & TOverrideParameters) => (import("../../types/utils.js").Assign<Block, TOverrideReturnType> extends infer T ? { [K in keyof T]: import("../../types/utils.js").Assign<Block, TOverrideReturnType>[K]; } : never) & { [K_1 in TExclude[number]]: never; };
    type: "block";
};
//# sourceMappingURL=block.d.ts.map