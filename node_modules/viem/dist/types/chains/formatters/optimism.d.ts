import type { FeeValuesEIP1559 } from '../../types/fee.js';
import type { Hash, Hex } from '../../types/misc.js';
import type { Index, Quantity, RpcTransaction as RpcTransaction_ } from '../../types/rpc.js';
import type { Transaction as Transaction_, TransactionBase } from '../../types/transaction.js';
type RpcTransaction = RpcTransaction_ & {
    isSystemTx?: undefined;
    mint?: undefined;
    sourceHash?: undefined;
};
type Transaction = Transaction_ & {
    isSystemTx?: undefined;
    mint?: undefined;
    sourceHash?: undefined;
};
export type RpcDepositTransaction = TransactionBase<Quantity, Index> & FeeValuesEIP1559<Quantity> & {
    isSystemTx?: boolean;
    mint?: Hex;
    sourceHash: Hex;
    type: '0x7e';
};
export type DepositTransaction = TransactionBase & FeeValuesEIP1559 & {
    isSystemTx?: boolean;
    mint?: bigint;
    sourceHash: Hex;
    type: 'deposit';
};
export type OptimismFormatOverrides = {
    RpcBlock: {
        transactions: Hash[] | OptimismFormatOverrides['RpcTransaction'][];
    };
    RpcTransaction: RpcTransaction | RpcDepositTransaction;
    Transaction: Transaction | DepositTransaction;
};
export declare const formattersOptimism: {
    readonly block: {
        format: (args: Partial<import("../../types/rpc.js").RpcBlock> & {
            transactions: Hash[] | OptimismFormatOverrides['RpcTransaction'][];
        }) => {
            baseFeePerGas: bigint | null;
            difficulty: bigint;
            extraData: `0x${string}`;
            gasLimit: bigint;
            gasUsed: bigint;
            hash: `0x${string}` | null;
            logsBloom: `0x${string}` | null;
            miner: `0x${string}`;
            mixHash: `0x${string}`;
            nonce: `0x${string}` | null;
            number: bigint | null;
            parentHash: `0x${string}`;
            receiptsRoot: `0x${string}`;
            sealFields: `0x${string}`[];
            sha3Uncles: `0x${string}`;
            size: bigint;
            stateRoot: `0x${string}`;
            timestamp: bigint;
            totalDifficulty: bigint | null;
            transactions: `0x${string}`[] | (Transaction | DepositTransaction)[];
            transactionsRoot: `0x${string}`;
            uncles: `0x${string}`[];
        } & {};
        type: "block";
    };
    readonly transaction: {
        format: (args: (Partial<Omit<import("../../types/transaction.js").TransactionLegacy<`0x${string}`, `0x${string}`, "0x0">, "typeHex">> & Omit<import("../../types/transaction.js").TransactionLegacy<`0x${string}`, `0x${string}`, "0x0">, "typeHex"> & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | (Partial<Omit<import("../../types/transaction.js").TransactionEIP2930<`0x${string}`, `0x${string}`, "0x1">, "typeHex">> & Omit<import("../../types/transaction.js").TransactionEIP2930<`0x${string}`, `0x${string}`, "0x1">, "typeHex"> & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        }) | (Partial<Omit<import("../../types/transaction.js").TransactionEIP1559<`0x${string}`, `0x${string}`, "0x2">, "typeHex">> & Omit<import("../../types/transaction.js").TransactionEIP1559<`0x${string}`, `0x${string}`, "0x2">, "typeHex"> & {
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        })) => ({
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: bigint;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            accessList?: undefined;
            chainId?: number | undefined;
            type: "legacy";
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList?: undefined;
            chainId?: number | undefined;
            type: 'deposit';
            isSystemTx?: boolean | undefined;
            mint?: bigint | undefined;
            sourceHash: Hex;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: bigint;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: "eip2930";
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: "eip1559";
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: 'deposit';
            isSystemTx?: boolean | undefined;
            mint?: bigint | undefined;
            sourceHash: Hex;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: bigint;
            maxFeePerGas: undefined;
            maxPriorityFeePerGas: undefined;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: "eip2930";
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: "eip1559";
            isSystemTx?: undefined;
            mint?: undefined;
            sourceHash?: undefined;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: 'deposit';
            isSystemTx?: boolean | undefined;
            mint?: bigint | undefined;
            sourceHash: Hex;
        }) & {};
        type: "transaction";
    };
};
export {};
//# sourceMappingURL=optimism.d.ts.map