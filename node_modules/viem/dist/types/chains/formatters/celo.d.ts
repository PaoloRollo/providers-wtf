import type { Address } from 'abitype';
import type { Hash, Hex } from '../../types/misc.js';
import type { RpcTransaction } from '../../types/rpc.js';
import type { Transaction } from '../../types/transaction.js';
export type CeloFormatOverrides = {
    RpcBlock: {
        randomness: {
            committed: Hex;
            revealed: Hex;
        };
        transactions: Hash[] | (RpcTransaction & {
            feeCurrency: Address | null;
            gatewayFee: Hex | null;
            gatewayFeeRecipient: Address | null;
        })[];
    };
    RpcTransaction: {
        feeCurrency: Address | null;
        gatewayFee: Hex | null;
        gatewayFeeRecipient: Address | null;
    };
    RpcTransactionReceipt: {
        feeCurrency: Address | null;
        gatewayFee: Hex | null;
        gatewayFeeRecipient: Address | null;
    };
    TransactionRequest: {
        feeCurrency?: Address;
        gatewayFee?: bigint;
        gatewayFeeRecipient?: Address;
    };
    Transaction: {
        feeCurrency: Address | null;
        gatewayFee: bigint | null;
        gatewayFeeRecipient: Address | null;
    };
};
export declare const formattersCelo: {
    readonly block: {
        format: (args: Partial<import("../../types/rpc.js").RpcBlock> & {
            randomness: {
                committed: Hex;
                revealed: Hex;
            };
            transactions: Hash[] | (RpcTransaction & {
                feeCurrency: Address | null;
                gatewayFee: Hex | null;
                gatewayFeeRecipient: Address | null;
            })[];
        }) => {
            baseFeePerGas: bigint | null;
            difficulty: bigint;
            extraData: `0x${string}`;
            gasLimit: bigint;
            gasUsed: bigint;
            hash: `0x${string}` | null;
            logsBloom: `0x${string}` | null;
            miner: `0x${string}`;
            mixHash: `0x${string}`;
            nonce: `0x${string}` | null;
            number: bigint | null;
            parentHash: `0x${string}`;
            receiptsRoot: `0x${string}`;
            sealFields: `0x${string}`[];
            sha3Uncles: `0x${string}`;
            size: bigint;
            stateRoot: `0x${string}`;
            timestamp: bigint;
            totalDifficulty: bigint | null;
            transactions: `0x${string}`[] | (Transaction & {
                feeCurrency: Address | null;
                gatewayFee: bigint | null;
                gatewayFeeRecipient: Address | null;
            })[];
            transactionsRoot: `0x${string}`;
            uncles: `0x${string}`[];
            randomness: {
                committed: Hex;
                revealed: Hex;
            };
        } & {
            nonce: never;
            difficulty: never;
            gasLimit: never;
            mixHash: never;
            uncles: never;
        };
        type: "block";
    };
    readonly transaction: {
        format: (args: Partial<RpcTransaction> & {
            feeCurrency: Address | null;
            gatewayFee: Hex | null;
            gatewayFeeRecipient: Address | null;
        }) => ({
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: bigint;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            accessList?: undefined;
            chainId?: number | undefined;
            type: "legacy";
            feeCurrency: `0x${string}` | null;
            gatewayFee: bigint | null;
            gatewayFeeRecipient: `0x${string}` | null;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice: bigint;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: "eip2930";
            feeCurrency: `0x${string}` | null;
            gatewayFee: bigint | null;
            gatewayFeeRecipient: `0x${string}` | null;
        } | {
            blockHash: `0x${string}` | null;
            blockNumber: bigint | null;
            from: `0x${string}`;
            gas: bigint;
            hash: `0x${string}`;
            input: `0x${string}`;
            nonce: number;
            r: `0x${string}`;
            s: `0x${string}`;
            to: `0x${string}` | null;
            transactionIndex: number | null;
            typeHex: `0x${string}` | null;
            v: bigint;
            value: bigint;
            gasPrice?: undefined;
            maxFeePerGas: bigint;
            maxPriorityFeePerGas: bigint;
            accessList: import("../../types/transaction.js").AccessList;
            chainId: number;
            type: "eip1559";
            feeCurrency: `0x${string}` | null;
            gatewayFee: bigint | null;
            gatewayFeeRecipient: `0x${string}` | null;
        }) & {};
        type: "transaction";
    };
    readonly transactionReceipt: {
        format: (args: Partial<import("../../types/rpc.js").RpcTransactionReceipt> & {
            feeCurrency: Address | null;
            gatewayFee: Hex | null;
            gatewayFeeRecipient: Address | null;
        }) => {
            blockHash: `0x${string}`;
            blockNumber: bigint;
            contractAddress: `0x${string}` | null;
            cumulativeGasUsed: bigint;
            effectiveGasPrice: bigint;
            from: `0x${string}`;
            gasUsed: bigint;
            logs: import("../../index.js").Log<bigint, number>[];
            logsBloom: `0x${string}`;
            status: "success" | "reverted";
            to: `0x${string}` | null;
            transactionHash: `0x${string}`;
            transactionIndex: number;
            type: import("../../types/transaction.js").TransactionType;
            feeCurrency: `0x${string}` | null;
            gatewayFee: bigint | null;
            gatewayFeeRecipient: `0x${string}` | null;
        } & {};
        type: "transactionReceipt";
    };
    readonly transactionRequest: {
        format: (args: Partial<import("../../types/transaction.js").TransactionRequest> & {
            feeCurrency?: `0x${string}` | undefined;
            gatewayFee?: bigint | undefined;
            gatewayFeeRecipient?: `0x${string}` | undefined;
        }) => ({
            data?: `0x${string}` | undefined;
            from: `0x${string}`;
            gas?: `0x${string}` | undefined;
            nonce?: `0x${string}` | undefined;
            to?: `0x${string}` | undefined;
            value?: `0x${string}` | undefined;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            accessList?: undefined;
            type?: "0x0" | undefined;
            feeCurrency: `0x${string}` | undefined;
            gatewayFee: `0x${string}` | undefined;
            gatewayFeeRecipient: `0x${string}` | undefined;
        } | {
            data?: `0x${string}` | undefined;
            from: `0x${string}`;
            gas?: `0x${string}` | undefined;
            nonce?: `0x${string}` | undefined;
            to?: `0x${string}` | undefined;
            value?: `0x${string}` | undefined;
            gasPrice?: `0x${string}` | undefined;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
            accessList?: import("../../types/transaction.js").AccessList | undefined;
            type?: "0x1" | undefined;
            feeCurrency: `0x${string}` | undefined;
            gatewayFee: `0x${string}` | undefined;
            gatewayFeeRecipient: `0x${string}` | undefined;
        } | {
            data?: `0x${string}` | undefined;
            from: `0x${string}`;
            gas?: `0x${string}` | undefined;
            nonce?: `0x${string}` | undefined;
            to?: `0x${string}` | undefined;
            value?: `0x${string}` | undefined;
            gasPrice?: undefined;
            maxFeePerGas?: `0x${string}` | undefined;
            maxPriorityFeePerGas?: `0x${string}` | undefined;
            accessList?: import("../../types/transaction.js").AccessList | undefined;
            type?: "0x2" | undefined;
            feeCurrency: `0x${string}` | undefined;
            gatewayFee: `0x${string}` | undefined;
            gatewayFeeRecipient: `0x${string}` | undefined;
        }) & {};
        type: "transactionRequest";
    };
};
//# sourceMappingURL=celo.d.ts.map